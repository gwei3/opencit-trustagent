#!/bin/bash
# WARNING:
# *** do NOT use TABS for indentation, use SPACES
# *** TABS will cause errors in some linux distributions

if [ "$#" -lt "2" ]; then
  echo "Usage: tpm2-readek <ownerpass> <ekType: RSA/ECC> [verbose]"
  exit 0
fi

binpath=/opt/trustagent/bin

passwd=$1
ekType=$2 #RSA, ECC
verbose=$3 #verbose
ekFile=/tmp/ek.pub
ekHandle=

function read_pubkey()
{
  ekHandle=$1
  ekFile=$2
  verbose=$3 #verbose

  if [[ $verbose == "verbose" ]]; then
    echo "ekHandle = $ekHandle"
    tpm2_readpublic -H $ekHandle -o $ekFile
  else
    tpm2_readpublic -H $ekHandle -o $ekFile > /dev/null
  fi

  if [[ $? != 0 ]];then
    echo "failed: unable to read pubkey."
    return 3
  fi
}

function output_result()
{
  ekType=$1
  ekHandle=$2
  ekFile=$3
 
  echo -n "$ekHandle "
  
  case $ekType in
    "RSA")
      xxd -s 102 -l 256 -ps $ekFile | tr -d "\n"  ;;
    "ECC")
      xxd -ps $ekFile | tr -d "\n"  ;;
  esac

  echo
}


result=`${binpath}/tpm2-findek $ekType`
if [[ $? != 0 ]]; then
  result1=`${binpath}/tpm2-createek $passwd $ekType $ekFile`
  if [[ $? != 0 ]]; then
    echo "failed createek"
    exit 1
  fi
  output_result $ekType `echo $result1 | grep -o "0x[[:xdigit:]]\{8\}"` $ekFile
  exit 0
fi

rm -f $ekFile

#echo $result
ekHandle=`echo $result | grep -o "0x[[:xdigit:]]\{8\}"`
read_pubkey $ekHandle $ekFile $verbose
if [[ $? != 0 ]]; then
  echo failed to read $ekHandle
  exit 2
fi

output_result $ekType $ekHandle $ekFile

if [[ $verbose == "verbose" ]]; then
  echo "done. Read from $ekHandle"
fi



